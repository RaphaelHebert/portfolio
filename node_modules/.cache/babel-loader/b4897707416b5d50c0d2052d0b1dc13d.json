{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhebert/Desktop/portfolio/src/components/projects/NSDPY/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport projectsList from \"../../projectsList/projectsList\";\nimport \"../projects.css\"; //images\n\nimport pipy from './img/pypi.png';\nimport python from './img/python.png';\nimport ncbi from './img/ncbi.png';\nimport readTheDocs from './img/readTheDoc.png';\nimport colab from './img/colabgoogle.png';\nimport github from './img/github.png';\nimport softwareX from './img/softwareX.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst images = [pipy, python, ncbi, readTheDocs, colab, github, softwareX];\n\nconst NSDPY = () => {\n  _s();\n\n  // TODO: get the project name from url \n  const [project, setProject] = useState([]);\n  useEffect(() => {\n    setProject(projectsList.filter(project => project.name === \"NSDPY\")[0]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: project ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logos\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: project.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Nucleotides Sequences Downloader with Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logos\",\n        children: images.map(img => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: img,\n            alt: \"logo\",\n            width: \"100px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"My first \\\"professional\\\" achievement with Python3... I wrote this script during a voluntary internship. NSDPY aims to ease the work of people who need to download big batches of DNA sequences such as biologists or geneticist.. It can automatize batch downloading from the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.ncbi.nlm.nih.gov/\",\n          children: \"NCBI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 66\n        }, this), \" databases and then filter and sort the downloaded sequences according to their taxonomy. /n NCBI is available on GitHub or can be installed as a package from the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://pypi.org/project/nsdpy/\",\n          children: \"PyPI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 30\n        }, this), \" website to be used directly in the terminal and included in a pipeline. It is also available on \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://colab.research.google.com/drive/1UmxzRc_k5sNeQ2RPGe29nWR_1_0FRPkq\",\n          children: \"Google Colab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // TODO: put a spinner\n    _jsxDEV(\"p\", {\n      children: \"Loading project...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NSDPY, \"0/XdUihKyW7xYXfoPs8i3rCVMLc=\");\n\n_c = NSDPY;\nexport default NSDPY;\n\nvar _c;\n\n$RefreshReg$(_c, \"NSDPY\");","map":{"version":3,"sources":["/Users/raphaelhebert/Desktop/portfolio/src/components/projects/NSDPY/index.js"],"names":["useState","useEffect","projectsList","pipy","python","ncbi","readTheDocs","colab","github","softwareX","images","NSDPY","project","setProject","filter","name","map","img"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAO,iBAAP,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;;;AAGA,MAAMC,MAAM,GAAG,CACXP,IADW,EAEXC,MAFW,EAGXC,IAHW,EAIXC,WAJW,EAKXC,KALW,EAMXC,MANW,EAOXC,SAPW,CAAf;;AAYA,MAAME,KAAK,GAAG,MAAM;AAAA;;AAEhB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACbY,IAAAA,UAAU,CAACX,YAAY,CAACY,MAAb,CAAoBF,OAAO,IAAIA,OAAO,CAACG,IAAR,KAAiB,OAAhD,EAAyD,CAAzD,CAAD,CAAV;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,cAEIH,OAAO,gBACP;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,oBAAKA,OAAO,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACKL,MAAM,CAACM,GAAP,CAAYC,GAAG,IAAI;AAChB,8BACI;AAAK,YAAA,GAAG,EAAEA,GAAV;AAAe,YAAA,GAAG,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGH,SAJA;AADL;AAAA;AAAA;AAAA;AAAA,cALJ,eAYI;AAAA,qTAEiD;AAAG,UAAA,IAAI,EAAC,+BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFjD,sLAIa;AAAG,UAAA,IAAI,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJb,oHAK6B;AAAG,UAAA,IAAI,EAAC,2EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA,oBADO;AAAA;AAqBP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBJ,mBADJ;AA8BH,CAvCD;;GAAMN,K;;KAAAA,K;AAyCN,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport projectsList from \"../../projectsList/projectsList\";\nimport \"../projects.css\";\n\n//images\nimport pipy from './img/pypi.png';\nimport python from './img/python.png';\nimport ncbi from './img/ncbi.png';\nimport readTheDocs from './img/readTheDoc.png';\nimport colab from './img/colabgoogle.png';\nimport github from './img/github.png';\nimport softwareX from './img/softwareX.jpeg'\n\n\nconst images = [\n    pipy,\n    python,\n    ncbi,\n    readTheDocs, \n    colab,\n    github,\n    softwareX\n]\n\n\n\nconst NSDPY = () => {\n\n    // TODO: get the project name from url \n    const [project, setProject] = useState([])\n\n    useEffect( () => {\n        setProject(projectsList.filter(project => project.name === \"NSDPY\")[0])\n    }, [])\n\n    return(\n        <>\n        {\n            project?\n            <>\n                <div className=\"logos\">\n                    <h1>{project.name}</h1>\n                    <p>Nucleotides Sequences Downloader with Python</p>\n                </div>\n                <div className=\"logos\">\n                    {images.map( img => {\n                        return(\n                            <img src={img} alt=\"logo\" width=\"100px\"/>\n                        )            \n                    })}\n                </div>\n                <p>My first \"professional\" achievement with Python3... I wrote this script during a voluntary internship. \n                    NSDPY aims to ease the work of people who need to download big batches of DNA sequences such as biologists or geneticist..\n                    It can automatize batch downloading from the <a href=\"https://www.ncbi.nlm.nih.gov/\" >NCBI</a> databases and then filter \n                    and sort the downloaded sequences according to their taxonomy. /n NCBI is available on GitHub or can be installed as a package\n                    from the <a href=\"https://pypi.org/project/nsdpy/\">PyPI</a> website to be used directly in the terminal and included in a pipeline.\n                     It is also available on <a href=\"https://colab.research.google.com/drive/1UmxzRc_k5sNeQ2RPGe29nWR_1_0FRPkq\" >Google Colab</a></p>\n\n            </>:\n            // TODO: put a spinner\n            <p>Loading project...</p>\n\n        }\n        </>\n    )\n}\n\nexport default NSDPY;"]},"metadata":{},"sourceType":"module"}